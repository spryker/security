{# constant #}
{% macro addConstant(constant) %}
    {% if constant.deprecationDescription is not null -%}
    /**
     * @deprecated {{ constant.deprecationDescription }}
     */
    {% endif -%}
    public const {{ constant.name }} = '{{ constant.value }}';

{% endmacro %}

{# metadata #}
{% macro addMetadata(normalizedProperties) %}
    /**
     * @var array
     */
    protected $transferMetadata = [
    {% for property in normalizedProperties %}
    self::{{ property.propertyConst }} => [
            'type' => '{{ property.type_fully_qualified }}',
            'name_underscore' => '{{ property.name_underscore }}',
            'is_collection' => {{ property.is_collection ? 'true' : 'false' }},
            'is_transfer' => {{ property.is_transfer ? 'true' : 'false' }},
            'rest_request_parameter' => '{{ property.restRequestParameter is defined ? property.restRequestParameter : 'no' }}',
        ],
    {% endfor -%}
];
{%- endmacro %}

{# property #}
{% macro addProperty(property) %}
    /**
     * @var {{ property.type }}
     */
    protected ${{ property.name }}{% if property.type == 'array' or property.is_typed_array %} = []{% endif %};
{% endmacro %}

{# propertyNamesMap #}
{% macro addPropertyNameMap(propertyNameMap) %}
    /**
     * @var array
     */
    protected $transferPropertyNameMap = [
    {% for propertyNameUnderScore, propertyNameCamelCase  in propertyNameMap %}
    '{{ propertyNameUnderScore }}' => '{{ propertyNameCamelCase }}',
    {% endfor -%}
    ];
{%- endmacro %}

{# constructor #}
{% macro addConstructor(properties) %}
{% if properties %}
    public function __construct()
    {
{% for property, collectionType in properties %}
        parent::__construct();

        $this->{{ property }} = new {{ collectionType }}();
{% endfor %}
    }
{% endif %}
{% endmacro %}

{# set method #}
{%- macro addSet(method) %}
    /**
     {% if method.bundles is defined -%}
     * @module {{ method.bundles|join('|') }}
     *
     {% endif -%}
     {% if method.deprecationDescription is not null -%}
     * @deprecated {{ method.deprecationDescription }}
     *
     {% endif -%}
     * @param {{ method.var }}{% if method.hasDefaultNull %}|null{% endif %} ${{ method.property }}
     *
     * @return $this
     */
    public function {{ method.name }}({% if method.typeHint %}{{ method.typeHint }} {% endif %}${{ method.property }}{% if method.hasDefaultNull %} = null{% endif %})
    {
        {% if method.typeHint == "array" -%}
        if (${{ method.property }} === null) {
            ${{ method.property }} = [];
        }

        {% endif -%}
        $this->{{ method.property }} = ${{ method.property }};
        $this->modifiedProperties[self::{{ method.propertyConst }}] = true;

        return $this;
    }
{% endmacro -%}

{# get method #}
{%- macro addGet(method) %}
    /**
     {% if method.bundles is defined -%}
     * @module {{ method.bundles|join('|') }}
     *
     {% endif -%}
     {% if method.deprecationDescription is not null -%}
     * @deprecated {{ method.deprecationDescription }}
     *
     {% endif -%}
     * @return {{ method.return }}
     */
    public function {{ method.name }}()
    {
        return $this->{{ method.property }};
    }
{% endmacro -%}

{# add method #}
{%- macro addAdd(method) %}
    /**
     {% if method.bundles is defined -%}
     * @module {{ method.bundles|join('|') }}
     *
     {% endif -%}
     {% if method.deprecationDescription is not null -%}
     * @deprecated {{ method.deprecationDescription }}
     *
     {% endif -%}
     * @param {{ method.var }} ${{ method.property }}
     *
     * @return $this
     */
    public function {{ method.name }}({% if method.typeHint %}{{ method.typeHint }} {% endif %}${{ method.property }})
    {
        $this->{{ method.parent }}[] = ${{ method.property }};
        $this->modifiedProperties[self::{{ method.propertyConst }}] = true;

        return $this;
    }
{% endmacro -%}

{# require method #}
{%- macro addRequire(method) %}
    /**
     {% if method.bundles is defined -%}
     * @module {{ method.bundles|join('|') }}
     *
     {% endif -%}
     {% if method.deprecationDescription is not null -%}
     * @deprecated {{ method.deprecationDescription }}
     *
     {% endif -%}
     * @return $this
     */
    public function {{ method.name }}()
    {
{% if method.isCollection and method.typeHint != "array" %}
        $this->assertCollectionPropertyIsSet(self::{{ method.propertyConst }});
{% else %}
        $this->assertPropertyIsSet(self::{{ method.propertyConst }});
{% endif %}

        return $this;
    }
{% endmacro -%}

{%- macro addEntityNamespace(entityNamespace) %}
    /**
    * @var string
    */
    public static $entityNamespace = '{{ entityNamespace }}';
{% endmacro -%}

